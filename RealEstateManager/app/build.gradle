plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
    id 'androidx.navigation.safeargs.kotlin'
}

/*
API 'BaseVariant.getApplicationIdTextResource' is obsolete and has been replaced with 'VariantProperties.applicationId'.
        It will be removed in version 7.0 of the Android Gradle plugin.
For more information, see TBD.
        To determine what is calling BaseVariant.getApplicationIdTextResource, use -Pandroid.debug.obsoleteApi=true on the command line to display more information.
*/

android {

    /*Properties properties = new Properties()
    if (rootProject.file("local.properties").exists()) {
        properties.load(rootProject.file("local.properties").newDataInputStream())
    }*/

    compileSdkVersion 30
    defaultConfig {
        applicationId "com.openclassrooms.realestatemanager"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'com.openclassrooms.realestatemanager.MockTestRunner'
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        // clear state after each individual test
        // testInstrumentationRunnerArguments clearPackageData: 'true'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        viewBinding true
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    lintOptions {
        disable 'RestrictedApi'
    }

    testOptions {
//        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests.includeAndroidResources = true
    }

    sourceSets {
        debug {
            java {
                srcDirs 'src/debug/java'
            }
            res {
                srcDirs 'src/debug/res'
            }
            assets {
                srcDirs 'src/debug/assets'
            }
            resources {
                srcDirs 'src/debug/resources'
            }
        }
        release {
            java {
                srcDirs 'src/release/java'
            }
        }

        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    // Instead, use the bundle block to control which types of configuration APKs
    // you want your app bundle to support.
    bundle {
        language {
            // This property is set to true by default.
            // You can specify `false` to turn off
            // generating configuration APKs for language resources.
            // These resources are instead packaged with each base and
            // feature APK.
            // Continue reading below to learn about situations when an app
            // might change setting to `false`, otherwise consider leaving
            // the default on for more optimized downloads.
            enableSplit = true
        }
        density {
            // This property is set to true by default.
            enableSplit = true
        }
        abi {
            // This property is set to true by default.
            enableSplit = true
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Multi dex dependencies
    def multi_dex_version = "1.0.3"
    implementation "com.android.support:multidex:$multi_dex_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.5.31"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.5.31"

    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation "com.google.android.material:material:1.4.0"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    testImplementation 'androidx.test.ext:junit:1.1.3'

    def mockito_kotlin_version = "1.6.0"
    testImplementation "com.nhaarman:mockito-kotlin:$mockito_kotlin_version"

    def mockito_android_version = '3.12.4'
    androidTestImplementation "org.mockito:mockito-android:$mockito_android_version"

    // androidx.fragment testing
    def fragment_testing_version = "1.3.6"
    debugImplementation "androidx.fragment:fragment-testing:$fragment_testing_version"

    // Espresso
    def androidx_espresso_core = '3.4.0'
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidx_espresso_core"
    androidTestImplementation ("androidx.test.espresso:espresso-contrib:$androidx_espresso_core") {
            exclude module: "protobuf-lite"
            exclude group: 'org.checkerframework', module: 'checker'
    }

    def androidx_espresso_idling_resource = '3.4.0'
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$androidx_espresso_idling_resource"
    implementation "androidx.test.espresso:espresso-idling-resource:$androidx_espresso_idling_resource"

    def ui_automator_version = "2.2.0"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$ui_automator_version"

    // androidx.test
    def androidx_test_runner = "1.4.0"
    androidTestImplementation "androidx.test:runner:$androidx_test_runner"
    testImplementation "androidx.test:runner:$androidx_test_runner"

    //def test_orchestrator_version = "1.4.0-alpha04"
    //androidTestUtil "androidx.test:orchestrator:$test_orchestrator_version"

    def androidx_test_rules = "1.4.0"
    androidTestImplementation "androidx.test:rules:$androidx_test_rules"
    testImplementation "androidx.test:rules:$androidx_test_rules"

    /*def core_version = "1.3.2"
    implementation"androidx.core:core-ktx:$core_version"*/

    def androidx_test_core = "1.4.0"
    androidTestImplementation "androidx.test:core-ktx:$androidx_test_core"

    def arch_testing_version = "2.1.0"
    androidTestImplementation "androidx.arch.core:core-testing:$arch_testing_version"
    testImplementation "androidx.arch.core:core-testing:$arch_testing_version"

    // Robolectric environment
    def robolectric_version = "4.4"
    testImplementation "org.robolectric:robolectric:$robolectric_version"

    def truth_version = '1.4.0'
    androidTestImplementation "androidx.test.ext:truth:$truth_version"
    testImplementation "androidx.test.ext:truth:$truth_version"

    // jetpack navigation components
    def nav_version = "2.3.5"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // androidx.fragment
    def fragment_version = "1.3.6"
    implementation "androidx.fragment:fragment-ktx:$fragment_version"

    def activity_version = "1.3.1"
    implementation "androidx.activity:activity-ktx:$activity_version"

    // Dagger
    def dagger_version = '2.38.1'
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$dagger_version"

    // Firebase dependencies
    // Import the Firebase BoM
    // When using the BoM, don't specify versions in Firebase dependencies
    implementation platform('com.google.firebase:firebase-bom:28.4.1')

    // Add the dependency for the Firebase SDK for Google Analytics
    implementation 'com.google.firebase:firebase-analytics-ktx'

    // Declare the dependency for the Cloud Firestore library
    implementation 'com.google.firebase:firebase-firestore-ktx'
    // Resolve bug crashing Firestore on Android 11
//    implementation "io.grpc:grpc-okhttp:1.32.2"
//    implementation 'com.google.code.gson:gson:2.8.7'

    // Declare the dependency for the Cloud Storage library
    implementation 'com.google.firebase:firebase-storage-ktx'

    // FirebaseUI Storage only
    implementation 'com.firebaseui:firebase-ui-storage:8.0.0'

    // Add the dependencies for any other desired Firebase products
    // https://firebase.google.com/docs/android/setup#available-libraries

    def mock_neat_version = "0.4.7"
    implementation "net.andreinc:mockneat:$mock_neat_version"

    // Timber dependencies - log library
    def timber_version = '5.0.1'
    implementation "com.jakewharton.timber:timber:$timber_version"

    //glide
    def glide_version = '4.12.0'
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    // Reactive Programming dependencies
    def rx_kotlin_version = '2.4.0'
    implementation "io.reactivex.rxjava2:rxkotlin:$rx_kotlin_version"

    def rx_android_version = '2.1.1'
    implementation "io.reactivex.rxjava2:rxandroid:$rx_android_version"

    def room_version = "2.3.0"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // RxJava support for Room
    def room_rxjava_version = '1.1.1'
    implementation "android.arch.persistence.room:rxjava2:$room_rxjava_version"

    // Google Maps dependencies
    def maps_version = "17.0.1"
    implementation "com.google.android.gms:play-services-maps:$maps_version"

    // Google Maps Places SDK dependencies
    def places_version = "2.4.0"
    implementation "com.google.android.libraries.places:places:$places_version"

    def volley_version = "1.2.1"
    implementation "com.android.volley:volley:$volley_version"

    // Utilities for Maps SDK for Android (requires Google Play Services)
    def maps_utils_version = '2.2.6'
    implementation "com.google.maps.android:android-maps-utils:$maps_utils_version"

    def leakcanary_version = '2.7'
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanary_version"
}

